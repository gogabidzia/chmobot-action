const path = require("path");
const { exec } = require("child_process");

const SYSTEM_MESSAGE = `You are an AI designed to assist in software development tasks. Your current task is to analyze a set of given file paths, their contents, and a user prompt to generate updates that need to be made to these files.
The updates can be either the creation of new files or modifications to existing files.
The output should be a JSON array of updates.

Each Update should follow the following rules: 
1. If a command is needed to run, then 'type' needs to be 'command'.
    1.1 If type is 'command' then the command itself should be included in 'command' key.
2. If file needs to be created, then 'type' needs to be 'new_file' and it should also include
    2.1. 'file_path', path to file relative to root directory.
    2.2. 'file_content' content which needs to be inserted under file_path
3. If file needs to be updated, then 'type' needs to be 'update_file' and it should also include
    3.1. 'file_path', path to file relative to root directory.
    3.2. 'file_content' updated content of file under file_path

If files are already generated by commands that need to run, then don't output them in 'new_file' or 'update_file'.
Keep in mind that you should always take current directory as a working dir, meaning that if for example user is asking to create next app, you should use "." as folder.

Here is the format of the input and the expected output:
Input
File Paths and Contents: A JSON object where keys are file paths and values are the contents of these files.
User Prompt: A string describing the changes or additions needed.

Output
A JSON array of updates. Each update should be an object with the following structure:
type: "command", "new_file" or "update_file"
path: The file path to be created or updated, only in case of (new_file and update_file)
file_content: The new content for the file, only in case of (new_file and update_file). Should always be a string.

Never create files unless it's really required to do so!
`;

const test = async (workingDir) => {
  const res = await fetch(
    "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=AIzaSyD26mbORxYTvFVkI4bv7b-YxaGkP5_oRVA",
    {
      method: "POST",
      body: JSON.stringify({
        contents: [
          {
            role: "model",
            parts: [
              {
                text: SYSTEM_MESSAGE,
              },
            ],
          },
          {
            role: "user",
            parts: [
              {
                text: `FILES_JSON: [{"README.md": "1123123"}]
            USER_REQUEST: Create a boilerplate next app, with eslint, tailwind and typescript. Keep in mind to use '.' as a directory. Then append content "test" to readme.
            `,
              },
            ],
          },
        ],
      }),
    }
  );

  if (!res.ok) {
    console.error("Bad response", await res.json());
    return;
  }

  const data = await res.json();
  let json = data.candidates[0].content.parts[0].text;
  let parsed;

  try {
    parsed = JSON.parse(json);
    return parsed;
  } catch (e) {
    json = json.split("\n").slice(1, -1).join("\n");

    console.log(json);
    return JSON.parse(json);
  }
  throw new Error("vai");
};

const runCommand = (cmd) => {
  return new Promise((resolve, reject) => {
    exec(
      `${cmd}`,
      {
        cwd: '/github/workspace',
      },
      (err, stdout) => {
        if (err) {
          console.error(stdout);
          reject(err);
        }
        resolve(stdout);
      }
    );
  });
};

(async () => {
  const data = await test();

  for (let i = 0; i < data.length; i++) {
    const change = data[i];
    if (change.type == "command") {
      console.log("change", change);
      const stdout = await runCommand(change.command);
      console.log(stdout);
    }
  }
})();
